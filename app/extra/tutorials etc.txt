google api

https://developers.google.com/places/web-service/search

https://maps.googleapis.com/maps/api/place/details/json?placeid=ChIJG_RpsVdcFkcR7wiSvfYTin0&key=AIzaSyB9RA4U-oDzaTxzOAPYXNbPZWyeNQudpnQ
https://maps.googleapis.com/maps/api/place/textsearch/xml?query=trzy-kaczki-krak%C3%B3w&key=AIzaSyB9RA4U-oDzaTxzOAPYXNbPZWyeNQudpnQ

&pagetoken=CtQDxwEAAOOMM-SXJXqEZ0jjsVL80dkvhfoGqAGbV-yOqhgH4SlxnEmaqawJpaCqZpjBA93xAk8acmtS9AXCa7ohjoRia6y1puIINmL8_3ur8GKSi7PtdeTFihTvKIBbwrsoFD03xrM11qmWRq00qgAPDhLNQuaKJqgEKGNDXMp9J-F6eKK2clCuU0KveqH8A92IqixRFYKrkWnl9Q9rcWo8aOtHXIuuU6bKUF8_OVFNlriBdUYdIZj5MRj491o038KEtLv3x5XSdKmnqI5zlyXV4WWe5-xambc3GHp_6pCCZo_FxmHurv8Eh4BRWvigHedsZXc46xlg1BEHzPtnBWvyRkcTJCUKSz7Gc-J8coEEi3a2fqr2_tthm0DfrfaBT2dEEK-X14AtruGrscLVOFFKyHKeToaK3-URyEyiGYI1i2ikTw-luxUG0vcwgv74wyeXdfOif_IAzNIXgPW6sr3MKz6Mnb4fQziQ1GnxV46MP84ZQKFFpbHWUZ3PHixJe4YcXfBbPTlvlPpoOqXDY5rte0CnQ1GBAzx6onSale1GQwNz2Qr7cRAYez5ir7I9gdpm_olESbk6AZ3JVKZH-5ctq3p1c79IuODF-EtKAllylvQ9E5J3EhAvFpM-bRT499up5DtIGNn-GhQMU8qU1eDyGV5ep5fNC9ufMiXSew

https://maps.googleapis.com/maps/api/place/textsearch/json?key=AIzaSyB9RA4U-oDzaTxzOAPYXNbPZWyeNQudpnQ&query=restaurant-jerzmanowice

https://maps.googleapis.com/maps/api/place/autocomplete/json?input=jerzm&types=geocode&language=fr&key=YOUR_API_KEY
                                                                            Locale.getDefault().getLanguage()
https://maps.googleapis.com/maps/api/place/autocomplete/json?input=jerzm&types=geocode&key=AIzaSyB9RA4U-oDzaTxzOAPYXNbPZWyeNQudpnQ

https://maps.googleapis.com/maps/api/place/autocomplete/json?input=jerzm&types=geocode&key=AIzaSyB9RA4U-oDzaTxzOAPYXNbPZWyeNQudpnQ


menu jako fragment
http://droidmentor.com/how-to-use-fragment-specific-menu-in-android/


Session management
https://www.androidhive.info/2012/08/android-session-management-using-shared-preferences/
https://www.tutorialspoint.com/android/android_session_management.htm
https://www.youtube.com/watch?v=UXUCb2xZOuI

jak dziala loadee
https://www.androiddesignpatterns.com/2012/07/loaders-and-loadermanager-background.html

Kotlin / Android tutoriale
https://www.youtube.com/user/eddydn71/playlists
https://www.youtube.com/watch?v=sZWMPYIkNd8
https://www.youtube.com/watch?v=H_oGi8uuDpA&t=3629s
https://www.youtube.com/watch?v=NZUBcdNAuN0&vl=de

google sign in
https://firebase.google.com/docs/auth/android/google-signin
https://www.youtube.com/watch?v=i18IGN3MAbw

logowanie telefonem
https://firebase.google.com/docs/auth/android/phone-auth

login/email
https://firebase.google.com/docs/auth/android/password-auth


roddzaje baz danych
https://firebase.google.com/docs/firestore/rtdb-vs-firestore?authuser=0


facebook login
http://www.bsttutorial.com/kotlin-android-facebook-login-tutorial/


storage (do uploadowania zdjec)
https://firebase.google.com/docs/storage/android/start


        Facebook login - getting keyhash for app

        val info: PackageInfo
        try {
            info = packageManager.getPackageInfo("pl.nkozera.mastersthesis", PackageManager.GET_SIGNATURES)
            for (signature in info.signatures) {
                val md = MessageDigest.getInstance("SHA")
                md.update(signature.toByteArray())
                encodeToString(md.digest(), DEFAULT) /// KeyHash
            }
        } catch (e: Exception) {
            e.printStackTrace()
        }


Log levels

error:
    the system is in distress, customers are probably being affected (or will soon be) and the fix probably requires human intervention.
    The "2AM rule" applies here- if you're on call, do you want to be woken up at 2AM if this condition happens? If yes, then log it as "error".

warn:
    an unexpected technical or business event happened, customers may be affected, but probably no immediate human intervention is required.
    On call people won't be called immediately, but support personnel will want to review these issues asap to understand what the impact is.
    Basically any issue that needs to be tracked but may not require immediate intervention.

info:
    things we want to see at high volume in case we need to forensically analyze an issue. System lifecycle events (system start, stop) go here.
    "Session" lifecycle events (login, logout, etc.) go here. Significant boundary events should be considered as well (e.g. database calls, remote API calls).
    Typical business exceptions can go here (e.g. login failed due to bad credentials). Any other event you think you'll need to see in production at high volume goes here.

debug:
    just about everything that doesn't make the "info" cut... any message that is helpful in tracking the flow through the system and isolating issues, especially
    during the development and QA phases. We use "debug" level logs for entry/exit of most non-trivial methods and marking interesting events and decision points inside methods.

trace:
    we don't use this often, but this would be for extremely detailed and potentially high volume logs that you don't typically want enabled even during normal development.
    Examples include dumping a full object hierarchy, logging some state during every iteration of a large loop, etc.